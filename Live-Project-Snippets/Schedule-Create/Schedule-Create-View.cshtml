@model ScheduleUsers.Areas.Employer.ViewModels.ScheduleViewModel


@{
    ViewBag.Title = "Create";
}

<h2>Create Schedule</h2>
<input type="hidden" name="triggeringId" id="triggeringId" value="" />

@using (Html.BeginForm("Create", "Schedule", FormMethod.Post, new { id = "scheduleform" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>for User @Model.FirstName @Model.LastName</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(x => x.UserId)

        <div class="form-group">
            @Html.LabelFor(model => model.ScheduleStartDay, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ScheduleStartDay, new { htmlAttributes = new { @Value = Model.ScheduleStartDay.Value, @class = "form-control date-picker" } })
                @Html.ValidationMessageFor(model => model.ScheduleStartDay, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ScheduleEndDay, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ScheduleEndDay, new { htmlAttributes = new { @class = "form-control date-picker" } })
                @Html.ValidationMessageFor(model => model.ScheduleEndDay, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Repeating, "Repeating?", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBox("Repeating", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Repeating, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-2 text-right">
                <label for="scheduleLength">Schedule Length (days):</label>
            </div>
            <div class="col-md-2">
                <input type="number" id="ScheduleLength" name="ScheduleLength" min="1" max="@Model.MaxScheduleLength" value="@Model.WorkPeriods.Count()" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col-md-2">
            </div>
            <div class="col-md-2">
                <input type="submit" name="submit" value="Change Schedule" class="btn btn-default" id="ScheduleLengthSubmit" />
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-2 text-right">
                <h4>Date</h4>
            </div>
            <div class="col-md-1">
                <h4>Day Off?</h4>
            </div>
            <div class="col-md-3">
                <h4>Start Time</h4>
            </div>
            <div class="col-md-3">
                <h4>End Time</h4>
            </div>
            <div class="col-md-2">
                <h4>Work Type</h4>
            </div>
            <div class="col-md-1">
                <h4>Pay Rate</h4>
            </div>
        </div>
        <div id="WorkPeriodTable">
            @for (int i = 0; i < Model.WorkPeriods.Count; i++)
            {
                <div class="form-group row WorkPeriodRow">
                    <div class="col-md-2 text-right">
                        @(Model.ScheduleStartDay.Value.AddDays(i).DayOfWeek + " " + Model.ScheduleStartDay.Value.AddDays(i).ToShortDateString())
                    </div>
                    <div class="col-md-1">
                        @Html.DropDownListFor(model => model.WorkPeriods[i].IsDayOff, Model.IsDayOffList)
                        @Html.ValidationMessageFor(model => model.WorkPeriods[i].IsDayOff, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.WorkPeriods[i].StartTime, new { htmlAttributes = new { @class = "form-control date-picker time-picker start-time-picker" } })
                        @Html.ValidationMessageFor(model => model.WorkPeriods[i].StartTime, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.WorkPeriods[i].EndTime, new { htmlAttributes = new { @class = "form-control date-picker time-picker end-time-picker" } })
                        @Html.ValidationMessageFor(model => model.WorkPeriods[i].EndTime, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2">
                        @Html.DropDownListFor(model => model.WorkPeriods[i].WorkType, (IEnumerable<SelectListItem>)ViewBag.WorkTypeList, "Select Worktype", new { @class = "worktypes" })
                        @Html.ValidationMessageFor(model => model.WorkPeriods[i].WorkType, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-1">
                        @Html.EditorFor(model => model.WorkPeriods[i].PayRate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.WorkPeriods[i].PayRate, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" onclick="addRow()" name="addrow" id="addrow" value="Add one Work Period" class="btn btn-default" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" name="submit" value="Save Schedule" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<!-- New Worktype Modal -->
<div id="worktypesModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                <h4 id="modalTitle" class="modal-title">Add New Worktype</h4>
            </div>
            <div id="modalBody" class="modal-body">
                <input id="txtNewOption" type="text" />
            </div>
            <div class="modal-footer">
                <button type="button" id="btnAddNewWorktype" value="AddNewItem" class="btn btn-default" data-dismiss="modal">Save and Close</button>
            </div>
        </div>
    </div>
</div>
<!-- /New Worktype Modal -->

<script type="text/javascript">
    $(function () {
        $("#ScheduleStartDay").datepicker({
            changeMonth: true,
            changeYear: true,
            yearRange: "-5:+5",
            controlType: 'select',
            // This function sets the earliest date allowed for end date to ensure
            // no negative time vacations
            onClose: function (dateText) {
                if (dateText != null) {
                    $("#ScheduleLengthSubmit").trigger("click");
                }
            },
        });
    });
    $(function () {
        $("#ScheduleEndDay").datepicker({
            changeMonth: true,
            changeYear: true,
            yearRange: "-5:+5",
            controlType: 'select',
        });
    });
    $(function () {
        $(".time-picker").datetimepicker({
            controlType: 'select',
            timeFormat: 'hh:mm TT',
            dateFormate: 'mm/dd/yy'
        });

    });

    function addRow() {
        var obj = document.getElementById("ScheduleLength");
        var currentLength = parseInt( obj.value );
        newLength = currentLength + 1;
        document.getElementById("ScheduleLength").value = newLength;
        document.getElementById("ScheduleLengthSubmit").click();
    }

    $(document).ready(function () {
        var startDate = new Date( '@Model.ScheduleStartDay.Value');
        $('#ScheduleStartDay').datepicker("change", { minDate: startDate });
        $('#ScheduleEndDay').datepicker("change", { minDate: startDate });

        //Set the date and date range for 'time picker' datetimepickers
        //this is REALLY SLOW 
        //might try to move to on focus event, but that closes the calendar first time it fires.
        //- pass smaller context to the initial selector
        var startTimePickers = document.getElementsByClassName("start-time-picker");
        for (i = 0, len = startTimePickers.length; i < len; i++) {
            var id = startTimePickers[i].id;
            var index = id.match(/\d+/);
            var eachStartDate = new Date(startDate);
            eachStartDate.setDate(+eachStartDate.getDate() + +index);
            $(startTimePickers[i]).datetimepicker("change", { minDate: new Date(eachStartDate), maxDate: new Date(eachStartDate) });
        }
        var endTimePickers = document.getElementsByClassName("end-time-picker");
        for (i = 0, len = endTimePickers.length; i < len; i++) {
            var id = endTimePickers[i].id;
            var index = id.match(/\d+/);
            var eachStartDate = new Date(startDate);
            var eachEndDate = new Date(startDate);
            eachStartDate.setDate(+eachStartDate.getDate() + +index);
            eachEndDate.setDate(+eachEndDate.getDate() + +index + 1);
            $(endTimePickers[i]).datetimepicker("change", { minDate: new Date(eachStartDate), maxDate: new Date(eachEndDate) });
        }

        $(".worktypes").change(function () {
            var item = $(this).find("option:selected");
            var text = item.html(); //get the selected option text
            if (text == "Add New Worktype") {
                var idTriggered = $(this).prop('id');
                $("#worktypesModal").modal(); //display the add new dialog
                document.getElementById("triggeringId").value = idTriggered;
            }
        });
        $(".worktypes").focus(function () {
            var item = $(this).find("option:selected");
            var text = item.html(); //get the selected option text
            if (text == "Add New Worktype") {
                var idTriggered = $(this).prop('id');
                $("#worktypesModal").modal(); //display the add new dialog
                document.getElementById("triggeringId").value = idTriggered;
            }
        });
        $("#btnAddNewWorktype").click(function () {
            var newItem = $("#txtNewOption").val(); //get the new value
            var newOption = document.createElement("option");
            newOption.text = newItem;
            newOption.value = newItem;
            var changeWorkTypeOf = document.getElementById("triggeringId").value;
            document.getElementById(changeWorkTypeOf).add(newOption);
            document.getElementById(changeWorkTypeOf).value = newItem;
            $('#worktypesModal').modal('hide');
            document.getElementById("ScheduleLengthSubmit").click();
        });

    })
    jQuery.validator.methods.date = function (value, element) {
        var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
        if (isChrome) {
            var d = new Date();
            return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
        } else {
            return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
        }
    };

</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
